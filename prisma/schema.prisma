generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  tgId         String    @id
  invited_by   String?
  balance      Int       @default(120)
  username     String
  photo_url    String

  current_game String?   @db.Uuid
  createdAt    DateTime  @default(now())

  lastDate     DateTime?
  ip_address   String?
  is_premium   Boolean   @default(false)
  language     String?

  createdGames Game[]    @relation("UserCreatedGames")
  joinedGames  Game[]    @relation("UserJoinedGames")

  invitedBy   User?           @relation("UserInvites", fields: [invited_by], references: [tgId])
  invitesMade User[]          @relation("UserInvites")

  payments     Payment[]
  rewards      Reward[]

  @@map("users")
}


model Game {
  id                 String      @id @default(uuid()) @db.Uuid

  status             GameStatus  @default(waiting)
  createdAt          DateTime    @default(now())
  startedAt          DateTime?
  endedAt            DateTime?
  moves              Int         @default(0)

  gameType           GameType

  winLines           Int?
  dot_size           Int?
  blot_size          BlotSize?

  winReason          WinReason?
  creatorId          String
  joinerId           String?

  creatorSocketId    String
  joinerSocketId     String?

  winnerId           String?

  creator            User        @relation("UserCreatedGames", fields: [creatorId], references: [tgId], onDelete: Cascade)
  joiner             User?       @relation("UserJoinedGames", fields: [joinerId], references: [tgId], onDelete: Cascade)

  @@map("games")
}

model Reward {
  id          Int         @id @default(autoincrement())

  reward_type RewardType
  meaning     Int

  userId    String
  user      User     @relation(fields: [userId], references: [tgId], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@map("rewards")
}

model Payment {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String
  user      User     @relation(fields: [userId], references: [tgId], onDelete: Cascade)

  amount    Int
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@map("payments")
}


enum RewardType {
  enter
  daily
  new
  unique
}

enum GameType {
  dot
  blot
  xo
}

enum GameStatus {
  waiting
  started
  finished
}

enum WinReason {
  timeout
  opponent_left
  fair_win
}

enum BlotSize {
  small
  medium
  big
}